package com.camerannonces;

import com.camerannonces.entity.Category;
import com.camerannonces.entity.Listing;
import com.camerannonces.repository.*;
import com.camerannonces.entity.*;
import com.camerannonces.enums.ListingStatus;
import com.camerannonces.enums.PlanType;
import com.camerannonces.repository.*;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.test.context.ActiveProfiles;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@ActiveProfiles("test") // Utilise application-test.properties si vous en avez un
class CamerannoncesBackendApplicationTests {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private CityRepository cityRepository;

    @Autowired
    private QuartierRepository quartierRepository;

    @Autowired
    private ListingRepository listingRepository;

    @Autowired
    private ListingImageRepository listingImageRepository;

    @Autowired
    private UserFavoriteRepository userFavoriteRepository;

    @Autowired
    private SignalRepository signalRepository;

    @Test
    void contextLoads() {
        // Test que le contexte Spring se charge correctement
        assertNotNull(userRepository);
        assertNotNull(categoryRepository);
        assertNotNull(cityRepository);
        assertNotNull(quartierRepository);
        assertNotNull(listingRepository);
        assertNotNull(listingImageRepository);
        assertNotNull(userFavoriteRepository);
        assertNotNull(signalRepository);

        System.out.println("‚úÖ Tous les repositories sont charg√©s correctement !");
    }

    @Test
    void testDatabaseConnection() {
        // Test de connexion √† la base de donn√©es
        try {
            long userCount = userRepository.count();
            long categoryCount = categoryRepository.count();
            long cityCount = cityRepository.count();
            long listingCount = listingRepository.count();

            System.out.println("üìä STATISTIQUES BASE DE DONN√âES:");
            System.out.println("üë• Utilisateurs: " + userCount);
            System.out.println("üìÇ Cat√©gories: " + categoryCount);
            System.out.println("üèôÔ∏è Villes: " + cityCount);
            System.out.println("üìù Annonces: " + listingCount);

            // V√©rifications basiques
            assertTrue(categoryCount >= 12, "Devrait avoir au moins 12 cat√©gories");
            assertTrue(cityCount > 0, "Devrait avoir des villes");

            System.out.println("‚úÖ Connexion base de donn√©es r√©ussie !");

        } catch (Exception e) {
            fail("‚ùå Erreur de connexion √† la base de donn√©es: " + e.getMessage());
        }
    }

    @Test
    void testCategoryRepository() {
        // Test du repository des cat√©gories
        try {
            // R√©cup√©rer toutes les cat√©gories actives
            var categories = categoryRepository.findByIsActiveTrueOrderByOrdreAffichage();

            assertFalse(categories.isEmpty(), "Devrait avoir des cat√©gories");

            System.out.println("üìÇ CAT√âGORIES TROUV√âES:");
            for (Category cat : categories) {
                System.out.println("  " + cat.getEmoji() + " " + cat.getNom() + " (" + cat.getNomAnglais() + ")");
            }

            // Test recherche par nom
            var phoneCategory = categoryRepository.findByNom("T√©l√©phones & Accessoires");
            assertTrue(phoneCategory.isPresent(), "Cat√©gorie T√©l√©phones devrait exister");

            System.out.println("‚úÖ Repository Category fonctionne !");

        } catch (Exception e) {
            fail("‚ùå Erreur test CategoryRepository: " + e.getMessage());
        }
    }

    @Test
    void testCityRepository() {
        // Test du repository des villes
        try {
            // R√©cup√©rer toutes les villes
            var cities = cityRepository.findByIsActiveTrueOrderByNom();

            assertFalse(cities.isEmpty(), "Devrait avoir des villes");

            System.out.println("üèôÔ∏è VILLES PAR R√âGION:");
            var regions = cityRepository.findAllRegions();
            for (String region : regions) {
                var citiesInRegion = cityRepository.findByRegionAndIsActiveTrue(region);
                System.out.println("  üìç " + region + ": " + citiesInRegion.size() + " villes");
            }

            // Test recherche Douala
            var douala = cityRepository.findByNom("Douala");
            assertTrue(douala.isPresent(), "Douala devrait exister");

            System.out.println("‚úÖ Repository City fonctionne !");

        } catch (Exception e) {
            fail("‚ùå Erreur test CityRepository: " + e.getMessage());
        }
    }

    @Test
    void testListingRepository() {
        // Test du repository des annonces
        try {
            // Compter les annonces par statut
            long activeListings = listingRepository.countByStatut(ListingStatus.ACTIVE);

            System.out.println("üìù ANNONCES ACTIVES: " + activeListings);

            if (activeListings > 0) {
                // Test pagination
                Page<Listing> firstPage = listingRepository.findByStatut(
                        ListingStatus.ACTIVE,
                        PageRequest.of(0, 5)
                );

                System.out.println("üìÑ Premi√®re page: " + firstPage.getContent().size() + " annonces");

                // Afficher quelques annonces
                for (Listing listing : firstPage.getContent()) {
                    System.out.println("  üì± " + listing.getTitre() + " - " +
                            listing.getPrix() + " FCFA - " + listing.getVille());
                }

                // Test recherche par cat√©gorie
                var phoneListings = listingRepository.findByCategoryIdAndStatut(
                        1L, ListingStatus.ACTIVE, PageRequest.of(0, 3)
                );

                System.out.println("üì± Annonces t√©l√©phones: " + phoneListings.getTotalElements());
            }

            System.out.println("‚úÖ Repository Listing fonctionne !");

        } catch (Exception e) {
            fail("‚ùå Erreur test ListingRepository: " + e.getMessage());
        }
    }

    @Test
    void testUserRepository() {
        // Test du repository des utilisateurs
        try {
            long totalUsers = userRepository.count();
            long boutiqueUsers = userRepository.countBoutiques();

            System.out.println("üë• UTILISATEURS:");
            System.out.println("  Total: " + totalUsers);
            System.out.println("  Boutiques: " + boutiqueUsers);

            // Test recherche par plan
            var gratuitUsers = userRepository.findByPlanActuel(PlanType.GRATUIT);
            System.out.println("  Plan gratuit: " + gratuitUsers.size());

            // Test utilisateurs actifs
            var activeUsers = userRepository.findByIsActiveTrue();
            System.out.println("  Actifs: " + activeUsers.size());

            System.out.println("‚úÖ Repository User fonctionne !");

        } catch (Exception e) {
            fail("‚ùå Erreur test UserRepository: " + e.getMessage());
        }
    }

    @Test
    void testSearchFunctionality() {
        // Test des fonctionnalit√©s de recherche
        try {
            // Test recherche textuelle
            var searchResults = listingRepository.searchByKeyword(
                    "iPhone",
                    ListingStatus.ACTIVE,
                    PageRequest.of(0, 5)
            );

            System.out.println("üîç RECHERCHE 'iPhone': " + searchResults.getTotalElements() + " r√©sultats");

            // Test recherche par ville
            var doualaListings = listingRepository.findByVilleAndStatut(
                    "Douala",
                    ListingStatus.ACTIVE,
                    PageRequest.of(0, 5)
            );

            System.out.println("üèôÔ∏è ANNONCES DOUALA: " + doualaListings.getTotalElements() + " r√©sultats");

            // Test filtres avanc√©s
            var filteredResults = listingRepository.findWithFilters(
                    1L,        // Cat√©gorie t√©l√©phones
                    "Douala",  // Ville
                    null,      // Quartier
                    100000,    // Prix min
                    600000,    // Prix max
                    null,      // √âtat
                    null,      // N√©gociable
                    ListingStatus.ACTIVE,
                    PageRequest.of(0, 10)
            );

            System.out.println("üîç RECHERCHE AVANC√âE: " + filteredResults.getTotalElements() + " r√©sultats");

            System.out.println("‚úÖ Fonctionnalit√©s de recherche op√©rationnelles !");

        } catch (Exception e) {
            fail("‚ùå Erreur test recherche: " + e.getMessage());
        }
    }

    @Test
    void testStatistics() {
        // Test des statistiques
        try {
            System.out.println("üìä STATISTIQUES D√âTAILL√âES:");

            // Statistiques par cat√©gorie
            var categoryStats = listingRepository.countByCategory(ListingStatus.ACTIVE);
            System.out.println("üìÇ Par cat√©gorie:");
            for (Object[] stat : categoryStats) {
                System.out.println("  " + stat[0] + ": " + stat[1] + " annonces");
            }

            // Statistiques par ville
            var cityStats = listingRepository.countByCity(ListingStatus.ACTIVE);
            System.out.println("üèôÔ∏è Par ville (top 5):");
            int count = 0;
            for (Object[] stat : cityStats) {
                if (count < 5) {
                    System.out.println("  " + stat[0] + ": " + stat[1] + " annonces");
                    count++;
                }
            }

            // Statistiques des utilisateurs par plan
            var planStats = userRepository.countUsersByPlan();
            System.out.println("üë• Par plan:");
            for (Object[] stat : planStats) {
                System.out.println("  " + stat[0] + ": " + stat[1] + " utilisateurs");
            }

            System.out.println("‚úÖ Statistiques g√©n√©r√©es avec succ√®s !");

        } catch (Exception e) {
            fail("‚ùå Erreur g√©n√©ration statistiques: " + e.getMessage());
        }
    }

    @Test
    void testDataIntegrity() {
        // Test de l'int√©grit√© des donn√©es
        try {
            System.out.println("üîç V√âRIFICATION INT√âGRIT√â DES DONN√âES:");

            // V√©rifier que chaque annonce a une cat√©gorie
            var listingsWithoutCategory = listingRepository.findAll().stream()
                    .filter(l -> l.getCategory() == null)
                    .count();

            assertEquals(0, listingsWithoutCategory, "Toutes les annonces devraient avoir une cat√©gorie");

            // V√©rifier que chaque annonce a un utilisateur
            var listingsWithoutUser = listingRepository.findAll().stream()
                    .filter(l -> l.getUser() == null)
                    .count();

            assertEquals(0, listingsWithoutUser, "Toutes les annonces devraient avoir un utilisateur");

            // V√©rifier les t√©l√©phones (format camerounais)
            var usersWithInvalidPhone = userRepository.findAll().stream()
                    .filter(u -> !u.getTelephone().matches("^237[0-9]{9}$"))
                    .count();

            assertEquals(0, usersWithInvalidPhone, "Tous les t√©l√©phones devraient √™tre au format camerounais");

            System.out.println("‚úÖ Int√©grit√© des donn√©es v√©rifi√©e !");

        } catch (Exception e) {
            fail("‚ùå Erreur v√©rification int√©grit√©: " + e.getMessage());
        }
    }

    @Test
    void testFinalSummary() {
        // R√©sum√© final des tests
        try {
            System.out.println("\n" + "=".repeat(50));
            System.out.println("üéâ R√âSUM√â FINAL DES TESTS");
            System.out.println("=".repeat(50));

            System.out.println("üìä BASE DE DONN√âES:");
            System.out.println("  üë• Utilisateurs: " + userRepository.count());
            System.out.println("  üìÇ Cat√©gories: " + categoryRepository.count());
            System.out.println("  üèôÔ∏è Villes: " + cityRepository.count());
            System.out.println("  üèòÔ∏è Quartiers: " + quartierRepository.count());
            System.out.println("  üìù Annonces: " + listingRepository.count());
            System.out.println("  üñºÔ∏è Images: " + listingImageRepository.count());
            System.out.println("  ‚ù§Ô∏è Favoris: " + userFavoriteRepository.count());
            System.out.println("  üö® Signalements: " + signalRepository.count());

            System.out.println("\n‚úÖ TOUS LES TESTS R√âUSSIS !");
            System.out.println("üöÄ Votre backend est pr√™t pour la Phase G !");
            System.out.println("=".repeat(50));

        } catch (Exception e) {
            fail("‚ùå Erreur r√©sum√© final: " + e.getMessage());
        }
    }
}